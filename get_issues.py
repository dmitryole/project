import requests
from webapp.config import STAGE_JIRA_URL, STAGE_JIRA_API_KEY


def get_issue():
    """GET API-запрос задач Jira"""
    url = f'{STAGE_JIRA_URL}/rest/api/2/search'
    headers = {
        "Authorization": f'Bearer {STAGE_JIRA_API_KEY}'
    }
    params = {
        # Cтрока запроса JQL
        "jql":
        "key = ATL-1322",
        # Индекс первого возвратного выпуска (на основе 0)
        "startAt": "",
        # Максимальное количество возвращаемых выпусков (по умолчанию 50)
        "maxResults": "",
        # Cледует ли проверять JQL-запрос
        "validateQuery": "true",
        # Список полей, возвращаемых для каждой задачи
        "fields": "summary,customfield_12203",
        # Список параметров, которые необходимо развернуть
        "expand": ""
    }
    response = requests.get(url, headers=headers, params=params)
    if response.ok:
        return response.json()
    else:
        print('Ошибка: Ошибка при подключении к Jira', response)


# print(get_issue())
"""
{
    'expand': 'names,schema',
    'startAt': 0,
    'maxResults': 50,
    'total': 1,
    'issues': [{
        'expand':
            'operations,versionedRepresentations,editmeta,changelog,renderedFields',
        'id': '190639',
        'self': 'https://stage-jira.',
        'key': 'ATL-1322',
        'fields': {
            'summary': 'Поддержка продуктов в проекте '
        }
    }]
}
"""


def post_issue():
    """POST API-запрос задач Jira"""
    url = f'{STAGE_JIRA_URL}/rest/api/2/search'
    fields = [
                "summary",
                "status",
                "assignee",
                "customfield_21501"
            ]
    jql = "key = SIRIUS-36505"
    startAt = 0
    maxResults = 15
    headers = {
        "Authorization": f'Bearer {STAGE_JIRA_API_KEY}'
    }
    body = {
            "jql": jql,
            "startAt": startAt,
            "maxResults": maxResults,
            "fields": fields
    }
    response = requests.post(url, headers=headers, json=body)
    if response.ok:
        return response.json()['issues']
    else:
        print('Ошибка: Ошибка при подключении к Jira', response)


print(post_issue())
"""
{
    'expand': 'names,schema',
    'startAt': 0,
    'maxResults': 15,
    'total': 1,
    'issues': [{
        'expand':
            'operations,versionedRepresentations,editmeta,changelog,renderedFields',
        'id': '190639',
        'self': 'https://stage-jira.',
        'key': 'ATL-1322',
        'fields': {
            'summary': 'Поддержка продуктов в проекте',
            'assignee': {
                'self': 'https://stage-jira.',
                'name': 'azhitnikova',
                'key': 'JIRAUSER34106',
                'avatarUrls': {
                    '48x48': 'https://stage-jira',
                    '24x24': 'https://stage-jira',
                    '16x16': 'https://stage-jira',
                    '32x32': 'https://stage-jira'
                },
                'displayName': 'Анна ******',
                'active': True,
                'timeZone': 'Europe/Moscow'
            },
            'status': {
                'self': 'https://stage-jira',
                'description':
                    'This was auto-generated by Jira Service Desk during',
                'iconUrl': 'https://stage-jira',
                'name': 'Готово',
                'id': '11512',
                'statusCategory': {
                    'self': 'https://stage-jira',
                    'id': 3,
                    'key': 'done',
                    'colorName': 'success',
                    'name': 'Выполнено'
                }
            }
        }
    }]
}
"""
